# Formerly called: anthropic_filemap.yaml
# This template is heavily inspired by anthropic's computer use demo, but you can use
# it with any LM.
agent:
  type: max_step # default          # <-- new ─ tells Pydantic which variant to use
  max_steps: 50
  model: {}
  templates:
    system_template: |-
      You are a helpful assistant that can interact with a computer to solve tasks.
    instance_template: |-
      <uploaded_files>
      {{working_dir}}
      </uploaded_files>
      I've uploaded a python code repository in the directory {{working_dir}}. 
      Your task is to create a **self-contained, minimal, and executable** version of the original test file when running command:\n"
      
      `{{problem_statement}}`

      This new file should:
      1. **Include all executed code paths** — it must contain **all functions, classes, and code blocks that are actually executed** when the test file is run.
      2. **Inline internal dependencies** — for any functions or classes imported from **within the same repository**, **copy their implementations directly into the new file**. 
      Do **not** use `import` statements for these internal dependencies
      3. **Exclude unnecessary code** — remove:
        * Any code (functions, variables, imports, etc.) that is **not executed** during the test run
        * Any `import` that is **unused** or only used by removed code
        * Unused `try-except` or `if-else` branches
      
      4. **Preserve existing code lines** — do not modify lines of code unless you're removing them.
      Avoid rewriting or reformatting. However, you can reformat when it requires modification such as if-else statement due to removal of certain lines.
      5. **Ensure it is executable** — the generated file should run **without errors** as a standalone script.
      6. **Do not modify the original file.** Only output the new file, called `concise.py`. The file should be saved in `{{working_dir}}`, the working directory.

      You have a new tool called `trace_info` that can help you get the trace log when running specific pytest in the repository. Use this tool to understand the global information of codebase and identify which parts of the code are executed when running the test file.

      Your thinking should be thorough and so it's fine if it's very long.
    next_step_template: |-
      OBSERVATION:
      {{observation}}
    next_step_no_output_template: |-
      Your command ran successfully and did not produce any output.
  tools:
    trace_info:
      docstring: returns the trace log when running specific pytest ('pytest_test_name') in the requested ('repo_name') repository
      signature: trace_info <repo_name> <pytest_test_name>
      arguments:
        - name: repo_name  
          type: string
          description: name of the repository to run the pytest. 
          required: true
        - name: pytest_test_name 
          type: string
          description: name of the pytest to get the trace log. 
          required: true
    env_variables:
      PAGER: cat
      MANPAGER: cat
      LESS: -R
      PIP_PROGRESS_BAR: 'off'
      TQDM_DISABLE: '1'
      GIT_PAGER: cat
    bundles:
      - path: tools/registry
      - path: tools/edit_anthropic
      - path: tools/review_on_submit_m
      - path: tools/tracing
    registry_variables:
      USE_FILEMAP: 'true'
      SUBMIT_REVIEW_MESSAGES:
        - |
          Thank you for your work on this issue. Please carefully follow the steps below to help review your changes.

          1. If you made any changes to your code after running the reproduction script, please run the reproduction script again.
            If the reproduction script is failing, please revisit your changes and make sure they are correct.
            If you have already removed your reproduction script, please ignore this step.
          2. Remove your reproduction script (if you haven't done so already).
          3. If you have modified any TEST files, please revert them to the state they had before you started fixing the issue.
            You can do this with `git checkout -- /path/to/test/file.py`. Use below <diff> to find the files you need to revert.
          4. Run the submit command again to confirm.

          Here is a list of all of your changes:

          <diff>
          {{diff}}
          </diff>
    enable_bash_tool: true
    parse_function:
      type: function_calling
  history_processors:
    - type: cache_control
      last_n_messages: 2
# instances: {}