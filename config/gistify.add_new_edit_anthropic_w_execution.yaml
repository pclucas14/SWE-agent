# Formerly called: anthropic_filemap.yaml
# This template is heavily inspired by anthropic's computer use demo, but you can use
# it with any LM.
env:
  post_startup_commands: ["pip install pytest"]
agent:
  type: max_step # default          # <-- new ─ tells Pydantic which variant to use
  max_steps: 5
  model: {}
  templates:
    system_template: |-
      You are a helpful assistant that can interact with a computer to solve tasks. Your job is to create a single file named `concise.py` in {{working_dir}} that is **self-contained**, **minimal**, and **executable**, and when used in place of the original test run reproduces the same runtime behavior and outputs when running with command {{problem_statement}}. Internal modules (functions, classes, etc) should not be imported but used by adding the module to the generated single file `concise.py`. Do not include `pytest.main(...)` or any if `__name__ == __main__` block. **Create the file using `str_replace_editor create` at first step.**
    instance_template: |-
      <uploaded_files>
      {{working_dir}}
      </uploaded_files>
      I've uploaded a python code repository in the directory {{working_dir}}.

      There is an original test invocation (the command that reproduces behavior we want to preserve):
          {{problem_statement}}
      Your job: create a single file named `concise.py` saved at {{working_dir}} that is **self-contained**, **minimal**, and **executable**, and when used in place of the original test run reproduces the same runtime behavior and outputs.

      OUTPUT
      - Produce one file only: `{{working_dir}}/concise.py`.
      - The assistant must return only the contents of `concise.py` (no extra files, no analysis, no commentary).

      HIGH-LEVEL RULES
      1. **Only keep code that is actually executed** when running `{{problem_statement}}`. "Executed" means the actual line(s) executed during that run (including import-time/top-level execution).
      2. **Inline (copy) every internal repository dependency** that is executed. Any function, class, or top-level code from files inside `{{working_dir}}` that was executed must be copied directly into `concise.py`.  
        → Do **not** keep `import` statements for these internal modules.
      3. **Keep external and stdlib imports as-is.** If the test uses third-party libraries (e.g., `requests`, `numpy`) or Python standard library modules, keep their `import` statements intact.
      4. **No cheating or shortcuts.**  
        - Do not stub, fake, or monkey-patch external modules/packages (e.g., no `sys.modules["requests"] = ...`).  
        - Do not reimplement third-party libraries.  
        - Do not hard-code expected outputs instead of executing code.  
        - Do not replace test logic with simplified equivalents.  
        - The behavior must come from the real executed code, not from shortcuts.  
      5. **Remove everything not executed.** Remove unused functions, classes, variables, imports, and unreachable branches. After removal, the file must remain syntactically correct and minimal.
      6. **Preserve original source lines.** Do not rewrite or reformat lines unless required to keep the file valid after removals. If you must alter lines due to deletions (e.g., adjust indentation or strip an empty `else`), make the smallest change necessary.
      7. **Do not change test behavior.** The program output, exceptions, and return/exit codes must match the original run of `{{problem_statement}}`. The test functions must remain intact, except adjusting imports so they refer to inlined definitions. Do not include `pytest.main(...)` or any if `__name__ == __main__` block.
      8. **Do not modify original repository files.** Create only `concise.py`.

      Your thinking should be thorough and so it's fine if it's very long.
    next_step_template: |-
      OBSERVATION:
      {{observation}}
    next_step_no_output_template: |-
      Your command ran successfully and did not produce any output.
  tools:
    env_variables:
      PAGER: cat
      MANPAGER: cat
      LESS: -R
      PIP_PROGRESS_BAR: 'off'
      TQDM_DISABLE: '1'
      GIT_PAGER: cat
    bundles:
      - path: tools/registry
      - path: tools/new_edit_anthropic
      - path: tools/review_on_submit_m
    registry_variables:
      USE_FILEMAP: 'true'
      SUBMIT_REVIEW_MESSAGES:
        - |
          Thank you for your work on this issue. Please carefully follow the steps below to help review your changes.

          1. If you made any changes to your code after running the reproduction script, please run the reproduction script again.
            If the reproduction script is failing, please revisit your changes and make sure they are correct.
            If you have already removed your reproduction script, please ignore this step.
          2. Remove your reproduction script (if you haven't done so already).
          3. If you have modified any TEST files, please revert them to the state they had before you started fixing the issue.
            You can do this with `git checkout -- /path/to/test/file.py`. Use below <diff> to find the files you need to revert.
          4. Run the submit command again to confirm.

          Here is a list of all of your changes:

          <diff>
          {{diff}}
          </diff>
    enable_bash_tool: false 
    parse_function:
      type: function_calling
  history_processors:
    - type: cache_control
      last_n_messages: 2
# instances: {}